### 1. Core Parser Functions (Keep) ###
def extract_trade_execution(response):
    """Extracts trade parameters from LLM response using regex.
    
    Pattern breakdown:
    - \* (Label) \*: Matches *Entry*, *Stop Loss*, or *Take Profit*
    - \[ (Value) \]: Captures numeric values with optional hyphen
    - Case-insensitive matching (?i)
    
    Returns dict with lowercase keys (entry, stop_loss, take_profit)
    """
    pattern = r'(?i)\*(Entry|Stop Loss|Take Profit)\*:\s*\[([\d\.-]+-?[\d\.-]*)\]'
    matches = re.findall(pattern, response)
    return {k.lower().replace(' ', '_'): v for k, v in matches} if matches else {}

def extract_final_decision(response):
    """Extracts CONFIRM/REJECT decision using simple regex lookup"""
    match = re.search(r'FINAL DECISION: (CONFIRM|REJECT)', response)
    return match.group(1) if match else "UNKNOWN"

def extract_justification(response):
    """Extracts justification text between markers using DOTALL flag"""
    match = re.search(r'Justification:(.*?)(?:\n\n|\Z)', response, re.DOTALL)
    return match.group(1).strip() if match else "No justification provided"

### 2. Comment Out/Remove (Irrelevant) ###
# def parse_json_response(response):  # Legacy JSON parser
#     try:
#         json_match = re.search(r'\{.*\}', response, re.DOTALL)
#         if json_match:
#             return json.loads(json_match.group())
#         return None
#     except json.JSONDecodeError as e:
#         print(f"JSON parse error: {str(e)}")
#         return None

### 3. Validation Helpers (Keep with Caution) ###
def validate_trade_data(trade_execution):
    """Partial validation - implement numeric checks if needed"""
    required = ['Entry', 'Stop_Loss', 'Take_Profit']
    if not all(k in trade_execution for k in required):
        raise ValueError(f"Missing keys: {[k for k in required if k not in trade_execution]}")


API Response → extract_* functions → Validated Data → CSV/JSON Storage


--------------------------------
I'll review the code, provide explanations for key components, and suggest improvements or comments for irrelevant parts. Here's a breakdown of the main elements:

## Key Components and Their Functions

1. **API Interaction**
   - The code uses the Perplexity AI API for generating forex trading analysis.
   - It sets up the API endpoint and authentication headers.

2. **Data Processing**
   - Reads a CSV file containing forex trading decisions.
   - Filters the data for 'buy' or 'sell' decisions.

3. **Perplexity AI Query Function**
   - `query_perplexity()`: Sends a request to the Perplexity AI API with a detailed template for forex analysis.
   - The template includes technical analysis, fundamental analysis, market sentiment, news analysis, and correlation analysis.

4. **Response Parsing Functions**
   - `extract_final_decision()`: Extracts the CONFIRM/REJECT decision from the API response.
   - `extract_justification()`: Retrieves the justification for the decision.
   - `extract_trade_execution()`: Parses trade execution details (Entry, Stop Loss, Take Profit).

5. **Data Storage Functions**
   - `append_decision()`: Adds the decision to a CSV file.
   - `append_trade_execution()`: Stores trade execution details in a JSON file.

6. **Main Execution Flow**
   - Reads the latest decision from the CSV file.
   - If it's a 'buy' or 'sell' decision, it queries the Perplexity AI for analysis.
   - Processes the response and stores the decision and trade execution details.

## Explanations and Suggestions

1. **API Interaction**: The code uses a specific AI model ("sonar-reasoning-pro") for forex analysis. This model is likely trained on financial data and market analysis techniques.

2. **Data Processing**: The code reads from a CSV file, which is a common format for storing tabular data. It's efficient for handling large datasets.

3. **AI Query Template**: The template sent to the AI is comprehensive, covering various aspects of forex analysis. This ensures a thorough evaluation of the trading decision.

4. **Response Parsing**: Regular expressions are used to extract specific information from the AI's response. This is a flexible way to parse unstructured text data.

5. **Data Storage**: The code uses both CSV and JSON formats for storing data. CSV is used for tabular data (decisions), while JSON is used for more complex data structures (trade executions).

## Suggestions for Improvement

1. **Error Handling**: Add more robust error handling, especially for API calls and file operations.

2. **Configuration**: Move API keys and file paths to a separate configuration file for better security and maintainability.

3. **Logging**: Implement a proper logging system instead of using print statements.

4. **Code Organization**: Consider splitting the code into separate modules (e.g., API interaction, data processing, file operations).

5. **Data Validation**: Implement more thorough validation of the AI's responses and the extracted data.

## Comments on Potentially Irrelevant Parts

1. The `parse_json_response()` function is commented out and not used. Consider removing it if it's no longer needed.

2. The `validate_trade_data()` function is defined but not used in the main execution flow. Either implement it or remove it.

3. The code checks for directory existence and write permissions, but this could be simplified and integrated into the file writing functions.

This code represents a complex system for automated forex trading decision validation using AI. It demonstrates integration of external APIs, data processing, and storage in a real-world application.



---
Respuesta de Perplexity: pplx.ai/share

import requests
import pandas as pd
import os
import re
import csv
import json
from datetime import datetime, timedelta
import pytz

API_ENDPOINT = "https://api.perplexity.ai/chat/completions"
API_KEY = "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"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

path = "C:/Users/david/OneDrive/Documents/api-decision-abraxas/data//processed/last_final_decision.csv"
decisions_file = "C:/Users/david/OneDrive/Documents/api-decision-abraxas/data/decisions/decisions.csv"
trade_execution_file = "C:/Users/david/OneDrive/Documents/api-decision-abraxas/data/decisions/trade_executions.json"

df = pd.read_csv(path)
print(df)

filtered_df = df[df['final_decision'].isin(['sell', 'buy'])]

def query_perplexity(action, currency_pair, local_time, market_time):
    analysis_template = f"""Validate this forex prediction for {currency_pair} to {action} in the next hour:

Current market time (GMT+5): {market_time.strftime("%Y-%m-%d %H:%M:%S")}
Current local time (Panama): {local_time.strftime("%Y-%m-%d %H:%M:%S")}

1. Technical Analysis (1-hour timeframe):
   - Analyze key indicators: Moving Averages, RSI, MACD, Bollinger Bands
   - Identify support/resistance levels
   - Evaluate chart patterns and price action

2. Fundamental Analysis:
   - Review recent economic data releases affecting {currency_pair}
   - Check for upcoming high-impact events in the next 24 hours
   - Assess central bank policies and statements

3. Market Sentiment:
   - Evaluate retail trader positioning
   - Analyze institutional sentiment and COT data
   - Review overall market risk appetite
   - validate this web site too: https://www.fxempire.com/

4. News Analysis:
   - Summarize relevant breaking news from reliable forex sources
   - Assess potential impact on {currency_pair}

5. Correlation Analysis:
   - Check correlations with related currency pairs
   - Evaluate impacts from commodity prices or stock market movements

Provide your analysis in the following format:
1. Summary: [2-3 sentence overview]
2. Technical Outlook: [Bullish/Bearish/Neutral with key points]
3. Fundamental Factors: [List key fundamental drivers]
4. Sentiment Analysis: [Current market sentiment with supporting data]
5. Risk Assessment: [Identify potential risks to the trade]
6. Contradiction Check: [Note any conflicting signals between technical and fundamental analysis]

FINAL DECISION: [CONFIRM/REJECT] {action.upper()} {currency_pair} for the next hour

Justification: [2-3 sentences explaining the final decision]

If the FINAL DECISION is CONFIRM, please provide the following:

**Trade Execution**
- Entry: [Current price range]
- Stop Loss: [Price level]
- Take Profit: [Price level]

Format requirements:
1. Wrap numerical values in square brackets: [1.0850]
2. Use exactly 3 decimal places for prices
3. Separate price ranges with hyphen: [1.0850-1.0860]
4. Never use currency symbols or commas in numbers

Ensure that the Stop Loss and Take Profit levels are based on key support/resistance levels and maintain a favorable risk-reward ratio."""

    data = {
        "model": "sonar-reasoning-pro",
        "messages": [
            {"role": "system", "content": "You are a quantum forex trading expert specializing in short-term market analysis and validation."},
            {"role": "user", "content": analysis_template}
        ]
    }
    
    response = requests.post(API_ENDPOINT, headers=headers, json=data,verify=False)
    
    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content']
    else:
        return f"Error: {response.status_code}, {response.text}"

def extract_final_decision(response):
    match = re.search(r'FINAL DECISION: (CONFIRM|REJECT)', response)
    if match:
        return match.group(1)
    return "UNKNOWN"

def extract_justification(response):
    match = re.search(r'Justification:(.*?)(?:\n\n|\Z)', response, re.DOTALL)
    if match:
        return match.group(1).strip()
    return "No justification provided"

def extract_trade_execution(response):
    pattern = r'(?i)\*(Entry|Stop Loss|Take Profit)\*:\s*\[([\d\.-]+-?[\d\.-]*)\]'
    matches = re.findall(pattern, response)
    return {k.lower().replace(' ', '_'): v for k, v in matches} if matches else {}

os.makedirs(os.path.dirname(decisions_file), exist_ok=True)
os.makedirs(os.path.dirname(trade_execution_file), exist_ok=True)

def append_decision(decision):
    df = pd.DataFrame([decision])
    df.to_csv(decisions_file, mode='a', header=not os.path.exists(decisions_file), index=False)

def append_trade_execution(decision, trade_execution):
    try:
        required_keys = ['Entry', 'Stop_Loss', 'Take_Profit']
        if not all(k in trade_execution for k in required_keys):
            raise ValueError("Missing trade execution parameters")
            
        with open(trade_execution_file, 'a', newline='') as f:
            writer = csv.DictWriter(f, fieldnames=required_keys)
            if f.tell() == 0:
                writer.writeheader()
            writer.writerow({
                'Entry': trade_execution['Entry'],
                'Stop_Loss': trade_execution['Stop_Loss'],
                'Take_Profit': trade_execution['Take_Profit']
            })
        print(f"Data written to {trade_execution_file}")
    except Exception as e:
        print(f"Critical write error: {str(e)}")

df = pd.read_csv(path).tail(1)
print(df)

def save_full_response(response_text):
    log_dir = "C:/Users/david/OneDrive/Documents/api-decision-abraxas/data/logs/"
    os.makedirs(log_dir, exist_ok=True)
    
    log_file = os.path.join(log_dir, "agent_responses.log")
    
    try:
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(f"\n{'='*80}\n")
            f.write(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(response_text)
            f.write(f"\n{'='*80}\n")
        print(f"Full response saved to: {log_file}")
    except Exception as e:
        print(f"Failed to save response: {str(e)}")

if df['final_decision'].iloc[0] in ['sell', 'buy']:
    action = df['final_decision'].iloc[0]
    currency_pair = df['currency_pair'].iloc[0]
    
    local_tz = pytz.timezone('America/Panama')
    market_tz = pytz.FixedOffset(5 * 60)  # GMT+5
    
    current_time = datetime.now(pytz.utc)
    local_time = current_time.astimezone(local_tz)
    market_time = current_time.astimezone(market_tz)
    
    result = query_perplexity(action, currency_pair, local_time, market_time)
    save_full_response(result)
    print(f"Raw API Response:\n{result}\n")
    
    print(f"Query: {action} {currency_pair}")
    print(f"Local Time (Panama): {local_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    trade_execution = extract_trade_execution(result)
    print(f"Parsed Execution Data: {trade_execution}")
    
    final_decision = extract_final_decision(result)
    justification = extract_justification(result)
    
    decision = {
        'timestamp_local': local_time.strftime("%Y-%m-%d %H:%M:%S"),
        'timestamp_market': market_time.strftime("%Y-%m-%d %H:%M:%S"),
        'currency_pair': currency_pair,
        'model_suggestion': action,
        'agent_decision': final_decision,
        'justification': justification
    }
    
    append_decision(decision)
    
    print(f"Decision appended to: {decisions_file}")
    
    if final_decision == 'CONFIRM':
        try:
            append_trade_execution(decision, trade_execution)
        except ValueError as e:
            print(f"Invalid Trade Data: {str(e)}")
            with open('failed_responses.log', 'a') as f:
                f.write(f"{datetime.now()} | {result}\n\n")
else:
    print("No valid action (buy/sell) found in the last row of last_final_decision.csv")

---------------------------------------------------------------------------------------------------------

import requests
import pandas as pd
import os
import re
import csv
import json
from datetime import datetime, timedelta
import pytz

API_ENDPOINT = "https://api.perplexity.ai/chat/completions"
API_KEY = "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"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

path = "C:/Users/david/OneDrive/Documents/api-decision-abraxas/data//processed/last_final_decision.csv"
decisions_file = "C:/Users/david/OneDrive/Documents/api-decision-abraxas/data/decisions/decisions.csv"
trade_execution_file = "C:/Users/david/OneDrive/Documents/api-decision-abraxas/data/decisions/trade_executions.json"

df = pd.read_csv(path)
print(df)

filtered_df = df[df['final_decision'].isin(['sell', 'buy'])]

def query_perplexity(action, currency_pair, local_time, market_time):
    analysis_template = f"""Validate this forex prediction for {currency_pair} to {action} in the next hour:

Current market time (GMT+5): {market_time.strftime("%Y-%m-%d %H:%M:%S")}
Current local time (Panama): {local_time.strftime("%Y-%m-%d %H:%M:%S")}

1. Technical Analysis (1-hour timeframe):
   - Analyze key indicators: Moving Averages, RSI, MACD, Bollinger Bands
   - Identify support/resistance levels
   - Evaluate chart patterns and price action

2. Fundamental Analysis:
   - Review recent economic data releases affecting {currency_pair}
   - Check for upcoming high-impact events in the next 24 hours
   - Assess central bank policies and statements

3. Market Sentiment:
   - Evaluate retail trader positioning
   - Analyze institutional sentiment and COT data
   - Review overall market risk appetite
   - validate this web site too: https://www.fxempire.com/

4. News Analysis:
   - Summarize relevant breaking news from reliable forex sources
   - Assess potential impact on {currency_pair}

5. Correlation Analysis:
   - Check correlations with related currency pairs
   - Evaluate impacts from commodity prices or stock market movements

Provide your analysis in the following format:
1. Summary: [2-3 sentence overview]
2. Technical Outlook: [Bullish/Bearish/Neutral with key points]
3. Fundamental Factors: [List key fundamental drivers]
4. Sentiment Analysis: [Current market sentiment with supporting data]
5. Risk Assessment: [Identify potential risks to the trade]
6. Contradiction Check: [Note any conflicting signals between technical and fundamental analysis]

FINAL DECISION: [CONFIRM/REJECT] {action.upper()} {currency_pair} for the next hour

Justification: [2-3 sentences explaining the final decision]

If the FINAL DECISION is CONFIRM, please provide the following:

**Trade Execution**
- Entry: [Current price range]
- Stop Loss: [Price level]
- Take Profit: [Price level]

Format requirements:
1. Wrap numerical values in square brackets: [1.0850]
2. Use exactly 3 decimal places for prices
3. Separate price ranges with hyphen: [1.0850-1.0860]
4. Never use currency symbols or commas in numbers

Ensure that the Stop Loss and Take Profit levels are based on key support/resistance levels and maintain a favorable risk-reward ratio."""

    data = {
        "model": "sonar-reasoning-pro",
        "messages": [
            {"role": "system", "content": "You are a quantum forex trading expert specializing in short-term market analysis and validation."},
            {"role": "user", "content": analysis_template}
        ]
    }
    
    response = requests.post(API_ENDPOINT, headers=headers, json=data,verify=False)
    
    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content']
    else:
        return f"Error: {response.status_code}, {response.text}"

def parse_json_response(response):
    try:
        # Extract first JSON block from response
        json_match = re.search(r'\{.*\}', response, re.DOTALL)
        if json_match:
            return json.loads(json_match.group())
        return None
    except json.JSONDecodeError as e:
        print(f"JSON parse error: {str(e)}")
        return None


def extract_final_decision(response):
    match = re.search(r'FINAL DECISION: (CONFIRM|REJECT)', response)
    if match:
        return match.group(1)
    return "UNKNOWN"

def extract_justification(response):
    match = re.search(r'Justification:(.*?)(?:\n\n|\Z)', response, re.DOTALL)
    if match:
        return match.group(1).strip()
    return "No justification provided"

def extract_trade_execution(response):
    # Try JSON first
    #json_data = parse_json_response(response)
    #if json_data:
    #    return {
    #        'Entry': json_data.get('entry', 'N/A'),
    #        'Stop_Loss': json_data.get('stop_loss', 'N/A'),
    #        'Take_Profit': json_data.get('take_profit', 'N/A')
    #    }
    
    # Fallback to enhanced regex
    #pattern = r'(?i)(\*Entry\*:\s*\[([\d\.-]+-[\d\.-]+))\]|(\*Stop Loss\*|\*Take Profit\*):\s*\[([\d\.-]+)\]'
    #matches = re.findall(pattern, response)
    #return {k.lower().replace(' ', '_'): v for k, v in matches} if matches else {}
    pattern = r'(?i)\*(Entry|Stop Loss|Take Profit)\*:\s*\[([\d\.-]+-?[\d\.-]*)\]'
    matches = re.findall(pattern, response)
    return {k.lower().replace(' ', '_'): v for k, v in matches} if matches else {}



# Check directory exists and is writable
dir_path = os.path.dirname(trade_execution_file)
if not os.path.exists(dir_path):
    print(f"Directory does not exist: {dir_path}")
elif not os.access(dir_path, os.W_OK):
    print(f"No write permissions for: {dir_path}")
else:
    print(f"Valid path with write access: {dir_path}")
    
os.makedirs(os.path.dirname(decisions_file), exist_ok=True)
os.makedirs(os.path.dirname(trade_execution_file), exist_ok=True)

def append_decision(decision):
    df = pd.DataFrame([decision])
    df.to_csv(decisions_file, mode='a', header=not os.path.exists(decisions_file), index=False)

def validate_trade_data(trade_execution):
    required = ['Entry', 'Stop_Loss', 'Take_Profit']
    numeric_check = r'^[\d\.-]+$'
    
    if not all(k in trade_execution for k in required):
        raise ValueError(f"Missing keys: {[k for k in required if k not in trade_execution]}")
    
    #if not all(re.match(numeric_check, str(v)) for v in trade_execution.values()):
     #   raise ValueError("Non-numeric values detected")


def append_trade_execution(decision, trade_execution):
    try:
        # Validate data before writing
        required_keys = ['Entry', 'Stop_Loss', 'Take_Profit']
        if not all(k in trade_execution for k in required_keys):
            raise ValueError("Missing trade execution parameters")
            
        # Explicit CSV formatting
        with open(trade_execution_file, 'a', newline='') as f:
            writer = csv.DictWriter(f, fieldnames=required_keys)
            if f.tell() == 0:  # Write header only if file is empty
                writer.writeheader()
            writer.writerow({
                'Entry': trade_execution['Entry'],
                'Stop_Loss': trade_execution['Stop_Loss'],
                'Take_Profit': trade_execution['Take_Profit']
            })
        print(f"Data written to {trade_execution_file}")
    except Exception as e:
        print(f"Critical write error: {str(e)}")


df = pd.read_csv(path).tail(1)
print(df)

def save_full_response(response_text):
    log_dir = "C:/Users/david/OneDrive/Documents/api-decision-abraxas/data/logs/"
    os.makedirs(log_dir, exist_ok=True)
    
    log_file = os.path.join(log_dir, "agent_responses.log")
    
    try:
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(f"\n{'='*80}\n")
            f.write(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(response_text)
            f.write(f"\n{'='*80}\n")
        print(f"Full response saved to: {log_file}")
    except Exception as e:
        print(f"Failed to save response: {str(e)}")
        

if df['final_decision'].iloc[0] in ['sell', 'buy']:
    action = df['final_decision'].iloc[0]
    currency_pair = df['currency_pair'].iloc[0]
    
    local_tz = pytz.timezone('America/Panama')
    market_tz = pytz.FixedOffset(5 * 60)  # GMT+5
    
    current_time = datetime.now(pytz.utc)
    local_time = current_time.astimezone(local_tz)
    market_time = current_time.astimezone(market_tz)
    
    result = query_perplexity(action, currency_pair, local_time, market_time)
    # Add this line immediately after getting the result
    save_full_response(result)  # This saves the complete raw response
    print(f"Raw API Response:\n{result}\n")  # Critical for debugging
    
    print(f"Query: {action} {currency_pair}")
    print(f"Local Time (Panama): {local_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    trade_execution = extract_trade_execution(result)
    print(f"Parsed Execution Data: {trade_execution}")
    #print(f"Query: {action} {currency_pair}")
    #print(f"Local Time (Panama): {local_time.strftime('%Y-%m-%d %H:%M:%S')}")
    #print(f"Market Time (GMT+5): {market_time.strftime('%Y-%m-%d %H:%M:%S')}")
    #print(f"Response: {result}\n")
    
    final_decision = extract_final_decision(result)
    justification = extract_justification(result)
    
    decision = {
        'timestamp_local': local_time.strftime("%Y-%m-%d %H:%M:%S"),
        'timestamp_market': market_time.strftime("%Y-%m-%d %H:%M:%S"),
        'currency_pair': currency_pair,
        'model_suggestion': action,
        'agent_decision': final_decision,
        'justification': justification
    }
    
    append_decision(decision)
    
    print(f"Decision appended to: {decisions_file}")
    
    if final_decision == 'CONFIRM':
        try:
            validate_trade_data(trade_execution)
            append_trade_execution(decision, trade_execution)
        except ValueError as e:
            print(f"Invalid Trade Data: {str(e)}")
            with open('failed_responses.log', 'a') as f:
                f.write(f"{datetime.now()} | {result}\n\n")
else:
    print("No valid action (buy/sell) found in the last row of last_final_decision.csv")




Format requirements:
1. Wrap numerical values in square brackets: [1.0850]
2. Use exactly 3 decimal places for prices
3. Separate price ranges with hyphen: [1.0850-1.0860]
4. Never use currency symbols or commas in numbers